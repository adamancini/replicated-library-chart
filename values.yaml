global:
  # -- Set additional global labels.
  labels: {}
  # -- Set additional global annotations.
  annotations: {}

# -- Global defaults
# TODO: NOT IMPLEMENTED. 
# Intended to be best practice defaults across different areas of the chart. May collapse this into the "global" key
defaults:
  image:
    pullPolicy: IfNotPresent

apps:
  example:
    # -- Enable the app
    # Each app represents a single controller type (deployment, daemonset, statefulset)
    enabled: false
     # -- Specify the controller type.
     # Valid options are deployment, daemonset or statefulset
     # TODO: daemonset and statefulset
    type: deployment

    # -- Set the replica count. Only used for deployment and statefulset
    replicas: 1

    image:
      # -- Specify the image repository for the primary container
      repository: nginx
      # -- Specify the image tag for the primary container
      tag: latest
      # -- Specify the image pull policy for the primary container
      pullPolicy:
    # -- Specify one or more image pull secrets
    imagePullSecrets: []

    # -- Override the command for the primary container
    command: []
    # -- Override the arguments for the primary container
    args: []

    # -- Main environment variables. Template enabled.
    # Syntax options:
    # A) TZ: UTC
    # B) PASSWD: '{{ .Release.Name }}'
    # C) PASSWD:
    #      configMapKeyRef:
    #        name: config-map-name
    #        key: key-name
    # D) PASSWD:
    #      valueFrom:
    #        secretKeyRef:
    #          name: secret-name
    #          key: key-name
    #      ...
    # E) - name: TZ
    #      value: UTC
    # F) - name: TZ
    #      value: '{{ .Release.Name }}'
    env:

    # -- Secrets and/or ConfigMaps that will be loaded as environment variables.
    # [[ref]](https://unofficial-kubernetes.readthedocs.io/en/latest/tasks/configure-pod-container/configmap/#use-case-consume-configmap-in-environment-variables)
    envFrom: []

    # -- Specify a list of additional volumes that get mounted in the primary container.
    # -- TODO: Not Implemented
    additionalVolumes: []

    # -- Specify a list of additional volumes mounts in the primary container.
    # -- TODO: Not Implemented
    additionalVolumeMounts: []

    # -- Set annotations on the deployment/statefulset/daemonset
    annotations: {}
    # -- Set labels on the deployment/statefulset/daemonset
    labels: {}

    # -- Specifies whether a service account token should be automatically mounted.
    automountServiceAccountToken: true
    serviceAccount:
      # -- Specifies whether a service account should be created
      create: false
      # -- Annotations to add to the service account
      annotations: {}
      # -- The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    # -- Specify any initContainers here as dictionary items. Each initContainer should have its own key.
    # The dictionary item key will determine the order. Helm templates can be used.
    initContainers: {}

    # -- Specify any additional containers here as dictionary items. Each additional container should have its own key.
    # Helm templates can be used.
    additionalContainers: {}
    
    # -- Set statefulset podManagementPolicy, valid values are Parallel and OrderedReady (default).
    podManagementPolicy:
    # -- Set annotations on the pod
    podAnnotations: {}
    # -- Set labels on the pod
    podLabels: {}

    # -- Set the controller upgrade strategy
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets ignore this.
    strategy:
    rollingUpdate:
      # -- Set deployment RollingUpdate max unavailable
      unavailable:
      # -- Set deployment RollingUpdate max surge
      surge:
      # -- Set statefulset RollingUpdate partition
      partition:
    # -- ReplicaSet revision history limit
    revisionHistoryLimit: 3

    # -- Custom priority class for different treatment by the scheduler
    priorityClassName:  # system-node-critical
    # -- Allow specifying a runtimeClassName other than the default one (ie: nvidia)
    runtimeClassName:  # nvidia
    # -- Allows specifying a custom scheduler name
    schedulerName:  # awkward-dangerous-scheduler
    # -- Allows specifying explicit hostname setting
    hostname:
    # -- When using hostNetwork make sure you set dnsPolicy to `ClusterFirstWithHostNet`
    hostNetwork: false
    # -- Defaults to "ClusterFirst" if hostNetwork is false and "ClusterFirstWithHostNet" if hostNetwork is true.
    dnsPolicy:  # ClusterFirst
    # -- Optional DNS settings, configuring the ndots option may resolve nslookup issues on some Kubernetes setups.
    dnsConfig: {}
    # -- Enable/disable the generation of environment variables for services.
    # [[ref]](https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#accessing-the-service)
    enableServiceLinks: true
    # -- Configure the Security Context for the Pod
    podSecurityContext: {}
    # -- Configure the Security Context for the primary container
    securityContext: {}
    # -- Configure the lifecycle for the main container
    lifecycle: {}
    # -- Specify any initContainers here as dictionary items. Each initContainer should have its own key.
    # The dictionary item key will determine the order. Helm templates can be used.
    initContainers: {}
    # -- Specify any additional containers here as dictionary items. Each additional container should have its own key.
    # Helm templates can be used.
    additionalContainers: {}
    # -- Probe configuration
    # -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
    # @default -- See below
    probes:
      # -- Liveness probe configuration
      # @default -- See below
      liveness:
        # -- Enable the liveness probe
        enabled: false
        # -- Set this to `true` if you wish to specify your own livenessProbe
        custom: false
        # -- The spec field contains the values for the default livenessProbe.
        # If you selected `custom: true`, this field holds the definition of the livenessProbe.
        # @default -- See below
        spec:
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
       # -- Redainess probe configuration
       # @default -- See below
      readiness:
        # -- Enable the readiness probe
        enabled: false
        # -- Set this to `true` if you wish to specify your own readinessProbe
        custom: false
        # -- The spec field contains the values for the default readinessProbe.
        # If you selected `custom: true`, this field holds the definition of the readinessProbe.
        # @default -- See below
        spec:
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      # -- Startup probe configuration
      # @default -- See below
      startup:
        # -- Enable the startup probe
        enabled: false
        # -- Set this to `true` if you wish to specify your own startupProbe
        custom: false
        # -- The spec field contains the values for the default startupProbe.
        # If you selected `custom: true`, this field holds the definition of the startupProbe.
        # @default -- See below
        spec:
          initialDelaySeconds: 0
          timeoutSeconds: 1
          ## This means it has a maximum of 5*30=150 seconds to start up before it fails
          periodSeconds: 5
          failureThreshold: 30
    termination:
      # -- Configure the path at which the file to which the main container's termination message will be written.
      # -- [[ref](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#lifecycle-1)]
      messagePath:
      # -- Indicate how the main container's termination message should be populated.
      # Valid options are `File` and `FallbackToLogsOnError`.
      # -- [[ref](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#lifecycle-1)]
      messagePolicy:
      # -- Duration in seconds the pod needs to terminate gracefully
      # -- [[ref](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#lifecycle)]
      gracePeriodSeconds:

    # -- Used to create individual disks for each instance when type: StatefulSet
    volumeClaimTemplates: []

    # -- Node selection constraint
    # [[ref]](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector)
    nodeSelector: {}

    # -- Defines affinity constraint rules.
    # [[ref]](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
    affinity: {}

    # -- Defines topologySpreadConstraint rules.
    # [[ref]](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/)
    topologySpreadConstraints: []
    # - maxSkew: <integer>
    #   topologyKey: <string>
    #   whenUnsatisfiable: <string>
    #   labelSelector: <object>

    # -- Specify taint tolerations
    # [[ref]](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
    tolerations: []

    # -- Use hostAliases to add custom entries to /etc/hosts - mapping IP addresses to hostnames.
    # [[ref]](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/)
    hostAliases: []
    # - ip: "192.168.1.100"
    #   hostnames:
    #   - "example.com"
    #   - "www.example.com"

    # -- Set the resource requests / limits for the primary container.
    resources: {}

# -- Configure the secrets for the chart here.
# Additional secrets can be added by adding a dictionary key similar to the 'exampleSecret' secret.
# @default -- See below
# TODO: nameOverride
# TODO: Ensure sha annotations on app are working
secrets:
  exampleSecret:
    # -- Enables or disables the secret
    enabled: false
    # -- Labels to add to the secret
    labels: {}
    # -- Annotations to add to the secret
    annotations: {}
    # -- configMap data content. Helm template enabled.
    data: {}
      # foo: bar
    # -- Override the name that is used for this service
    nameOverride:

# -- Configure the configmaps for the chart here.
# Additional configmaps can be added by adding a dictionary key similar to the 'exampleConfig' configmap.
# @default -- See below
# TODO: nameOverride
# TODO: Ensure sha annotations on app are working
configmaps:
  exampleConfig:
    # -- Enables or disables the configMap
    enabled: false
    # -- Labels to add to the configMap
    labels: {}
    # -- Annotations to add to the configMap
    annotations: {}
    # -- configMap data content. Helm template enabled.
    data: {}
      # foo: bar
    # -- Override the name that is used for this configmap. By default the name will be the name of the dictionary key
    nameOverride:

# -- Configure the services for the chart here.
# Additional services can be added by adding a dictionary key similar to the 'example' service.
# @default -- See below
# TODO: nameOverride
services:
  example:
    # -- Enables or disables the service
    enabled: false
    # -- Name of the app to attach this service. This corresponds to an app configured un the `apps` key
    # TODO: Accept a list of appnames of which to associate the service
    # TODO: Needs to be optional
    appName: example
    # -- Override the name that is used for this service. By default the name will be the name of the dictionary key
    nameOverride:
    # -- Set the service type
    type: ClusterIP
    # -- Specify the externalTrafficPolicy for the service. Options: Cluster, Local
    # -- [[ref](https://kubernetes.io/docs/tutorials/services/source-ip/)]
    externalTrafficPolicy:
    # -- Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
    ipFamilyPolicy:
     # -- The ip families that should be used. Options: IPv4, IPv6
    ipFamilies: []
    # -- Provide additional annotations which may be required.
    annotations: {}
    # -- Provide additional labels which may be required.
    labels: {}
    # -- Reference - https://kubernetes.io/docs/concepts/services-networking/service/#services-without-selectors
    # -- Labels selector(s) for the service to associate Pods as Endpoints. This takes precedence over services.*.appName
    # TODO: Not Implemented
    selector: {}
    # -- Configure the Service port information here.
    # Additional ports can be added by adding a dictionary key similar to the 'http' service.
    # @default -- See below
    ports:
      http:
        # -- Enables or disables the port
        enabled: true
        # -- The port number
        port:
        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTPS and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: HTTP
        # -- Specify a service targetPort if you wish to differ the service port from the application port.
        # If `targetPort` is specified, this port number is used in the container definition instead of
        # the `port` value. Therefore named ports are not supported for this field.
        targetPort:
        # -- Specify the nodePort value for the LoadBalancer and NodePort service types.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
        nodePort:

# -- Configure the ingresses for the chart here.
# Additional ingresses can be added by adding a dictionary key similar to the 'example' ingress.
# @default -- See below
ingresses:
  example:
    # -- Enables or disables the ingress
    enabled: false
    # -- Name of the service to attach this ingress. This corresponds to an service configured un the `services` key
    serviceName: example
    # -- Override the name that is used for this ingress. By default the name will be the name of the dictionary key
    nameOverride:
    # -- Provide additional annotations which may be required.
    annotations: {}
    # -- Provide additional labels which may be required.
    labels: {}
    # -- Set the ingressClass that is used for this ingress.
    # Requires Kubernetes >=1.19
    ingressClassName:  # "nginx"
    # -- Configure the hosts for the ingress
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
            service:
              # -- Service Name for the path. By default this is ingresses.example.serviceName if not overwritten
              # TODO: NOT IMPLEMENTED
              name:
              port:
    tls: []

# -- Configure volumes for the chart here.
# Additional items can be added by adding a dictionary key similar to the 'example' key.
# TODO: NOT IMPLEMENTED
# @default -- See below
persistence:
  example:
    # -- Enables or disables the volume
    enabled: false

    # -- Name of the app to attach this volume. This corresponds to an app configured un the `apps` key
    # TODO: NOT IMPLEMENTED
    # Should this be optional or mandatory? Safe to assume that any persistent object should be mounted by something? 
    appName: example

    # -- Volume type. Available options are ["volume", "persistentVolume," "persistentVolumeClaim"]
    # type.volume is a static volume definition directly on an app
    # type.persistentVolume creates a PV and a PVC pair and uses the PVC as a volume on the app
    # type.persistentVolumeClaim creates a new PVC or uses an existing PVC as a volume on the app
    type: persistentVolumeClaim

    # -- Where to mount the volume in the primary container.
    # Defaults to `/<name_of_the_volume>`,
    # setting to '-' creates the volume but disables the volumeMount.
    mountPath:  # /config

    # -- Specify if the volume should be mounted read-only.
    readOnly: false

    # -- Used in conjunction with `existingClaim`. Specifies a sub-path inside the referenced volume instead of its root
    subPath:  # some-subpath

    # -- Configure a volume to be mounted directly to the app's primary container
    volume:
      # -- Reference - https://kubernetes.io/docs/concepts/storage/volumes
      spec:
        hostPath:
          path: /tmp/data1
          type: DirectoryOrCreate

    # -- Configure a persistentVolume and persistentVolumeClaim pair to be mounted directly to the app's primary container
    persistentVolume:
      # -- Reference - https://kubernetes.io/docs/concepts/storage/persistent-volumes/
      spec:
        capacity:
          storage: 1Gi
        accessModes:
          - ReadWriteOnce
        reclaimPolicy:
          - Recycle
        hostPath:
          path: /tmp/data1

    # -- Configure a Persistent Volume Claim to be mounted to the app's primary container
    persistentVolumeClaim:
      # -- Existing Persistent Volume Claim name. Takes precedence over persistentVolumeClaim.spec 
      existingClaimName:
      # -- Reference - https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
      spec:
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        persistentVolumeReclaimPolicy: Retain
        resources:
          requests:
            storage: 8Gi
        storageClassName: slow
        selector:
          matchLabels:
            release: "stable"
          matchExpressions:
            - {key: environment, operator: In, values: [dev]}
